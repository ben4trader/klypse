// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file payment.proto (package api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message api.PaymentIntent
 */
export class PaymentIntent extends Message<PaymentIntent> {
  /**
   * @generated from field: string intent_id = 1;
   */
  intentId = "";

  /**
   * @generated from field: string item_id = 2;
   */
  itemId = "";

  /**
   * @generated from field: string destination = 4;
   */
  destination = "";

  /**
   * @generated from field: string price = 5;
   */
  price = "";

  /**
   * @generated from field: string currency = 6;
   */
  currency = "";

  constructor(data?: PartialMessage<PaymentIntent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.PaymentIntent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "intent_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "item_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "destination", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentIntent {
    return new PaymentIntent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentIntent {
    return new PaymentIntent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentIntent {
    return new PaymentIntent().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentIntent | PlainMessage<PaymentIntent> | undefined, b: PaymentIntent | PlainMessage<PaymentIntent> | undefined): boolean {
    return proto3.util.equals(PaymentIntent, a, b);
  }
}

/**
 * @generated from message api.PaymentIntentCreateRequest
 */
export class PaymentIntentCreateRequest extends Message<PaymentIntentCreateRequest> {
  /**
   * @generated from field: string item_id = 1;
   */
  itemId = "";

  constructor(data?: PartialMessage<PaymentIntentCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.PaymentIntentCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentIntentCreateRequest {
    return new PaymentIntentCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentIntentCreateRequest {
    return new PaymentIntentCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentIntentCreateRequest {
    return new PaymentIntentCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentIntentCreateRequest | PlainMessage<PaymentIntentCreateRequest> | undefined, b: PaymentIntentCreateRequest | PlainMessage<PaymentIntentCreateRequest> | undefined): boolean {
    return proto3.util.equals(PaymentIntentCreateRequest, a, b);
  }
}

/**
 * @generated from message api.PaymentIntentCreateResponse
 */
export class PaymentIntentCreateResponse extends Message<PaymentIntentCreateResponse> {
  /**
   * @generated from field: api.PaymentIntentCreateResponse.Result result = 1;
   */
  result = PaymentIntentCreateResponse_Result.OK;

  /**
   * @generated from field: string client_secret = 2;
   */
  clientSecret = "";

  constructor(data?: PartialMessage<PaymentIntentCreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.PaymentIntentCreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(PaymentIntentCreateResponse_Result) },
    { no: 2, name: "client_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentIntentCreateResponse {
    return new PaymentIntentCreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentIntentCreateResponse {
    return new PaymentIntentCreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentIntentCreateResponse {
    return new PaymentIntentCreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentIntentCreateResponse | PlainMessage<PaymentIntentCreateResponse> | undefined, b: PaymentIntentCreateResponse | PlainMessage<PaymentIntentCreateResponse> | undefined): boolean {
    return proto3.util.equals(PaymentIntentCreateResponse, a, b);
  }
}

/**
 * @generated from enum api.PaymentIntentCreateResponse.Result
 */
export enum PaymentIntentCreateResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: INVALID_REQUEST = 1;
   */
  INVALID_REQUEST = 1,

  /**
   * @generated from enum value: UNKNOWN_ERROR = 2;
   */
  UNKNOWN_ERROR = 2,

  /**
   * @generated from enum value: ALREADY_EXISTS = 3;
   */
  ALREADY_EXISTS = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(PaymentIntentCreateResponse_Result)
proto3.util.setEnumType(PaymentIntentCreateResponse_Result, "api.PaymentIntentCreateResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "INVALID_REQUEST" },
  { no: 2, name: "UNKNOWN_ERROR" },
  { no: 3, name: "ALREADY_EXISTS" },
]);

