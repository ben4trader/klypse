// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file user.proto (package api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message api.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string code_address = 2;
   */
  codeAddress = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string bio = 4;
   */
  bio = "";

  /**
   * @generated from field: bytes avatar = 5;
   */
  avatar = new Uint8Array(0);

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "code_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "bio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "avatar", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message api.UserSessionRequest
 */
export class UserSessionRequest extends Message<UserSessionRequest> {
  /**
   * @generated from field: string intent_id = 1;
   */
  intentId = "";

  /**
   * @generated from field: string source = 2;
   */
  source = "";

  constructor(data?: PartialMessage<UserSessionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.UserSessionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "intent_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserSessionRequest {
    return new UserSessionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserSessionRequest {
    return new UserSessionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserSessionRequest {
    return new UserSessionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserSessionRequest | PlainMessage<UserSessionRequest> | undefined, b: UserSessionRequest | PlainMessage<UserSessionRequest> | undefined): boolean {
    return proto3.util.equals(UserSessionRequest, a, b);
  }
}

/**
 * @generated from message api.UserSessionResponse
 */
export class UserSessionResponse extends Message<UserSessionResponse> {
  /**
   * @generated from field: api.UserSessionResponse.Result result = 1;
   */
  result = UserSessionResponse_Result.OK;

  /**
   * @generated from field: string token = 2;
   */
  token = "";

  constructor(data?: PartialMessage<UserSessionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.UserSessionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(UserSessionResponse_Result) },
    { no: 2, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserSessionResponse {
    return new UserSessionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserSessionResponse {
    return new UserSessionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserSessionResponse {
    return new UserSessionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserSessionResponse | PlainMessage<UserSessionResponse> | undefined, b: UserSessionResponse | PlainMessage<UserSessionResponse> | undefined): boolean {
    return proto3.util.equals(UserSessionResponse, a, b);
  }
}

/**
 * @generated from enum api.UserSessionResponse.Result
 */
export enum UserSessionResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: INVALID_REQUEST = 1;
   */
  INVALID_REQUEST = 1,

  /**
   * @generated from enum value: UNKNOWN_ERROR = 2;
   */
  UNKNOWN_ERROR = 2,

  /**
   * @generated from enum value: NOT_FOUND = 3;
   */
  NOT_FOUND = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(UserSessionResponse_Result)
proto3.util.setEnumType(UserSessionResponse_Result, "api.UserSessionResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "INVALID_REQUEST" },
  { no: 2, name: "UNKNOWN_ERROR" },
  { no: 3, name: "NOT_FOUND" },
]);

/**
 * @generated from message api.UserGetRequest
 */
export class UserGetRequest extends Message<UserGetRequest> {
  constructor(data?: PartialMessage<UserGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.UserGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGetRequest {
    return new UserGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGetRequest {
    return new UserGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGetRequest {
    return new UserGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserGetRequest | PlainMessage<UserGetRequest> | undefined, b: UserGetRequest | PlainMessage<UserGetRequest> | undefined): boolean {
    return proto3.util.equals(UserGetRequest, a, b);
  }
}

/**
 * @generated from message api.UserGetResponse
 */
export class UserGetResponse extends Message<UserGetResponse> {
  /**
   * @generated from field: api.UserGetResponse.Result result = 1;
   */
  result = UserGetResponse_Result.OK;

  /**
   * @generated from field: api.User user = 2;
   */
  user?: User;

  constructor(data?: PartialMessage<UserGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.UserGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(UserGetResponse_Result) },
    { no: 2, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGetResponse {
    return new UserGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGetResponse {
    return new UserGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGetResponse {
    return new UserGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserGetResponse | PlainMessage<UserGetResponse> | undefined, b: UserGetResponse | PlainMessage<UserGetResponse> | undefined): boolean {
    return proto3.util.equals(UserGetResponse, a, b);
  }
}

/**
 * @generated from enum api.UserGetResponse.Result
 */
export enum UserGetResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: INVALID_REQUEST = 1;
   */
  INVALID_REQUEST = 1,

  /**
   * @generated from enum value: UNKNOWN_ERROR = 2;
   */
  UNKNOWN_ERROR = 2,

  /**
   * @generated from enum value: NOT_FOUND = 3;
   */
  NOT_FOUND = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(UserGetResponse_Result)
proto3.util.setEnumType(UserGetResponse_Result, "api.UserGetResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "INVALID_REQUEST" },
  { no: 2, name: "UNKNOWN_ERROR" },
  { no: 3, name: "NOT_FOUND" },
]);

/**
 * @generated from message api.UserGetPublicProfileRequest
 */
export class UserGetPublicProfileRequest extends Message<UserGetPublicProfileRequest> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<UserGetPublicProfileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.UserGetPublicProfileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGetPublicProfileRequest {
    return new UserGetPublicProfileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGetPublicProfileRequest {
    return new UserGetPublicProfileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGetPublicProfileRequest {
    return new UserGetPublicProfileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserGetPublicProfileRequest | PlainMessage<UserGetPublicProfileRequest> | undefined, b: UserGetPublicProfileRequest | PlainMessage<UserGetPublicProfileRequest> | undefined): boolean {
    return proto3.util.equals(UserGetPublicProfileRequest, a, b);
  }
}

/**
 * @generated from message api.UserGetPublicProfileResponse
 */
export class UserGetPublicProfileResponse extends Message<UserGetPublicProfileResponse> {
  /**
   * @generated from field: api.UserGetPublicProfileResponse.Result result = 1;
   */
  result = UserGetPublicProfileResponse_Result.OK;

  /**
   * @generated from field: api.User user = 2;
   */
  user?: User;

  constructor(data?: PartialMessage<UserGetPublicProfileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.UserGetPublicProfileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(UserGetPublicProfileResponse_Result) },
    { no: 2, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGetPublicProfileResponse {
    return new UserGetPublicProfileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGetPublicProfileResponse {
    return new UserGetPublicProfileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGetPublicProfileResponse {
    return new UserGetPublicProfileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserGetPublicProfileResponse | PlainMessage<UserGetPublicProfileResponse> | undefined, b: UserGetPublicProfileResponse | PlainMessage<UserGetPublicProfileResponse> | undefined): boolean {
    return proto3.util.equals(UserGetPublicProfileResponse, a, b);
  }
}

/**
 * @generated from enum api.UserGetPublicProfileResponse.Result
 */
export enum UserGetPublicProfileResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: INVALID_REQUEST = 1;
   */
  INVALID_REQUEST = 1,

  /**
   * @generated from enum value: UNKNOWN_ERROR = 2;
   */
  UNKNOWN_ERROR = 2,

  /**
   * @generated from enum value: NOT_FOUND = 3;
   */
  NOT_FOUND = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(UserGetPublicProfileResponse_Result)
proto3.util.setEnumType(UserGetPublicProfileResponse_Result, "api.UserGetPublicProfileResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "INVALID_REQUEST" },
  { no: 2, name: "UNKNOWN_ERROR" },
  { no: 3, name: "NOT_FOUND" },
]);

/**
 * @generated from message api.UserUpdateRequest
 */
export class UserUpdateRequest extends Message<UserUpdateRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string bio = 2;
   */
  bio = "";

  /**
   * @generated from field: bytes avatar = 3;
   */
  avatar = new Uint8Array(0);

  constructor(data?: PartialMessage<UserUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.UserUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "avatar", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserUpdateRequest {
    return new UserUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserUpdateRequest {
    return new UserUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserUpdateRequest {
    return new UserUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserUpdateRequest | PlainMessage<UserUpdateRequest> | undefined, b: UserUpdateRequest | PlainMessage<UserUpdateRequest> | undefined): boolean {
    return proto3.util.equals(UserUpdateRequest, a, b);
  }
}

/**
 * @generated from message api.UserUpdateResponse
 */
export class UserUpdateResponse extends Message<UserUpdateResponse> {
  /**
   * @generated from field: api.UserUpdateResponse.Result result = 1;
   */
  result = UserUpdateResponse_Result.OK;

  constructor(data?: PartialMessage<UserUpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.UserUpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(UserUpdateResponse_Result) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserUpdateResponse {
    return new UserUpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserUpdateResponse {
    return new UserUpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserUpdateResponse {
    return new UserUpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserUpdateResponse | PlainMessage<UserUpdateResponse> | undefined, b: UserUpdateResponse | PlainMessage<UserUpdateResponse> | undefined): boolean {
    return proto3.util.equals(UserUpdateResponse, a, b);
  }
}

/**
 * @generated from enum api.UserUpdateResponse.Result
 */
export enum UserUpdateResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: INVALID_REQUEST = 1;
   */
  INVALID_REQUEST = 1,

  /**
   * @generated from enum value: UNKNOWN_ERROR = 2;
   */
  UNKNOWN_ERROR = 2,

  /**
   * @generated from enum value: NOT_FOUND = 3;
   */
  NOT_FOUND = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(UserUpdateResponse_Result)
proto3.util.setEnumType(UserUpdateResponse_Result, "api.UserUpdateResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "INVALID_REQUEST" },
  { no: 2, name: "UNKNOWN_ERROR" },
  { no: 3, name: "NOT_FOUND" },
]);

